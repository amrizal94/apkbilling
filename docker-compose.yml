version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: apkbilling_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: apkbilling
      POSTGRES_USER: apkbilling_user
      POSTGRES_PASSWORD: apkbilling_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - apkbilling_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apkbilling_user -d apkbilling"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: apkbilling_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - apkbilling_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: apkbilling_backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: apkbilling
      DB_USER: apkbilling_user
      DB_PASSWORD: apkbilling_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - apkbilling_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel
  frontend:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: apkbilling_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_SOCKET_URL: http://localhost:3000
    depends_on:
      - backend
    networks:
      - apkbilling_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: apkbilling_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - apkbilling_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  apkbilling_network:
    driver: bridge